// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sho.Pocket.DataAccess.Sql.EntityFramework;

namespace Sho.Pocket.DataAccess.Sql.EntityFramework.Migrations
{
    [DbContext(typeof(PocketDbContext))]
    [Migration("20200502163350_AddMoneyValueObjectToAsset")]
    partial class AddMoneyValueObjectToAsset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.AssetBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BankClientId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSyncDateTime")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetBankAccount");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Balance");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.BalanceNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BalanceNote");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("char(3)");

                    b.HasKey("Name");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("money");

                    b.Property<string>("CounterCurrency")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrency");

                    b.HasIndex("CounterCurrency");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.UserCurrency", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("char(3)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "Currency");

                    b.HasIndex("Currency");

                    b.ToTable("UserCurrency");
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.Asset", b =>
                {
                    b.OwnsOne("Sho.Pocket.Domain.ValueObjects.Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("AssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnName("Currency")
                                .HasColumnType("char(3)");

                            b1.Property<decimal>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("Value")
                                .HasColumnType("money")
                                .HasDefaultValue(0m);

                            b1.HasKey("AssetId");

                            b1.HasIndex("Currency");

                            b1.ToTable("Asset");

                            b1.WithOwner()
                                .HasForeignKey("AssetId");

                            b1.HasOne("Sho.Pocket.Domain.Entities.Currency", null)
                                .WithMany()
                                .HasForeignKey("Currency")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();
                        });
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.AssetBankAccount", b =>
                {
                    b.HasOne("Sho.Pocket.Domain.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.Balance", b =>
                {
                    b.HasOne("Sho.Pocket.Domain.Entities.Asset", "Asset")
                        .WithMany("Balances")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.ExchangeRate", b =>
                {
                    b.HasOne("Sho.Pocket.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("BaseCurrency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sho.Pocket.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CounterCurrency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Sho.Pocket.Domain.Entities.UserCurrency", b =>
                {
                    b.HasOne("Sho.Pocket.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
